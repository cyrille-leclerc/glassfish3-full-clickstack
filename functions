# -*-shell-script-*-

. "$genapp_functions/core"
. "$plugin_dir/java/functions"

glassfish_dir="$app_dir/glassfish3"
glassfish_base="$glassfish_dir/glassfish"
glassfish_domain="$glassfish_base/domains/domain1"
glassfish_lib_dir="$glassfish_domain/lib"
glassfish_work_dir="$glassfish_domain/work"

create_app_skel() {
    echo "Creating application skeleton at $app_dir"
    chmod 750 "$app_dir"
    mkdir -m 770 "$app_dir/tmp"
    mkdir -m 750 "$genapp_dir/lib"

    # We need to initialize this file as it is going to be sourced later.
    # Also, install_server_config step requires pre-existing files.
    touch "$control_dir/env_safe"
    chmod 640 "$control_dir/env_safe"
}

install_glassfish() {
    echo "Installing glassfish"
    unzip -qd "$app_dir" "$plugin_dir/lib/glassfish.zip"
    # Make all files readable for the start script.
    chmod -R o-rwx,g+r "$glassfish_dir"
    # Make all directories executable for the start script.
    find "$glassfish_dir" -type d -print0 | xargs -0 chmod g+x
    # Make the glassfish_domain directory writable for the start script.
    chmod -R g+w "$glassfish_domain"
}

install_jmx_invoker() {
   cp $plugin_dir/lib/cloudbees-jmx-invoker-jar-with-dependencies.jar $genapp_dir/lib/
   install -m 750 $plugin_dir/control/jmx_invoker $control_dir
}

install_jmxtrans_agent() {
    # The jmxtrans agent takes care of metrics reporting
    # which can be accessed with the control script stats-appstat
    echo "Installing jmxtrans-agent"

    _agent_config_file="$plugin_dir/server/conf/glassfish3-metrics.xml"
    _agent_config_file_dest="$glassfish_domain/config/glassfish3-metrics.xml"
    install -m 640 "$_agent_config_file" "$_agent_config_file_dest"

    _agent_jar_file="$plugin_dir/lib/jmxtrans-agent.jar"
    _agent_jar_dest="$genapp_dir/lib/jmxtrans-agent.jar"
    install -m 750 "$_agent_jar_file" "$_agent_jar_dest"

    _agent_data_dest="$log_dir/glassfish3-metrics.data"
    _java_opts="-javaagent:\"$_agent_jar_dest\"=\"$_agent_config_file_dest\""
    _java_opts+=" -Dglassfish3_metrics_data_file=\"$_agent_data_dest\""

    _agent_opts_file="$control_dir/java-opts-60-jmxtrans-agent"
    echo "$_java_opts" >> "$_agent_opts_file"
}

install_mysql_connector_jar() {
    echo "Installing mysql-connector"
    _mysql_connector_jar_file="$plugin_dir/lib/mysql-connector-java.jar"
    _mysql_connector_jar_dest="$glassfish_lib_dir/"
    install -m 750 "$_mysql_connector_jar_file" "$_mysql_connector_jar_dest"
}

install_app() {
    echo "Copying application war to $glassfish_domain/autodeploy"
    cp "$pkg_dir/app.war" "$glassfish_domain/autodeploy"
    lcount=$(unzip -l $pkg_dir/app.war | grep META-INF/lib/ | wc -l)
    echo "found $lcount files matching meta-inf/lib/"
    if [ "$lcount" -eq 0 ]; then
        echo "No lib provided under META-INF/lib."
    else
        unzip -jo "$pkg_dir/app.war" "META-INF/lib/"* -d "$glassfish_domain/lib"
    fi
}

install_server_config() {
    # We install the base configuration, which will be overwritten with
    # the metadata by the genapp-setup-glassfish3 jar.
    echo "Installing server config"
    cp "$plugin_dir/server/conf/domain.xml" "$glassfish_domain/config/"


    echo "Injecting metadata into domain.xml"
    # This jar writes metadata to:
    # $control_dir/env_safe
    # $glassfish_domain/config/domain.xml
    $(find_java) -jar "$plugin_dir/lib/genapp-setup-glassfish3.jar"
    chmod 640 "$glassfish_domain/config/domain.xml"
}

write_config() {
    _config="$control_dir/config"
    echo "Writing configuration to $_config"
    java=$(find_java)
    echo "Using Java at $java"
    echo "java=\"$java\"" >> "$_config"
    java_home="$(dirname $(dirname $java))"
    echo "Using JAVA_HOME at $java_home"
    echo "JAVA_HOME=\"$java_home\"" >> "$_config"
    echo "app_dir=\"$app_dir\"" >> "$_config"
    echo "genapp_dir=\"$genapp_dir\"" >> "$_config"
    echo "port=$app_port" >> "$_config"
    echo "glassfish_home=\"$glassfish_dir\"" >> "$_config"
    echo "glassfish_base=\"$glassfish_base\"" >> "$_config"
    echo "glassfish_domain=\"$glassfish_domain\"" >> "$_config"
    echo "glassfish_work_dir=\"$glassfish_work_dir\"" >> "$_config"
    echo "app_tmp=\"$app_dir/tmp\"" >> "$_config"
    echo "log_dir=\"$log_dir\"" >> "$_config"
}

write_control() {
    echo "Writing control scripts to $control_dir"
    install -m 550 "$plugin_dir/control/"* "$control_dir/"
}
